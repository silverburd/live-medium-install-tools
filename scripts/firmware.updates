#!/bin/sh

## firmware.updates - Updates the firmware with patches from the server.
## Copyright (C) 2014 Richard Nelson <unixabg@gmail.com>
##
## This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.

set -e

# Pull in common settings.
. '/usr/share/live-medium-install-tools/COMMON'

# Checking lock file.
if [ -f /var/lock/firmware.updates.lock ]
then
	echo "E: firmware.updates instance already/still running."
	exit 1
fi

# Creating lock trap
trap "test -f /var/lock/firmware.updates.lock && rm -f /var/lock/firmware.updates.lock; exit 0" 0 1 2 3 9 15

# Creating lock file
touch /var/lock/firmware.updates.lock

# Remount the media.
mount -o remount,rw ${_LIVE_PATH}

# Check the log file size and keep the size under some metrics.
_MAX_LOG_SIZE=1000000
if [ -f ${_FIRMWARE_UPDATES_LOG} ]
then
	_LOG_SIZE=$(stat -c%s ${_FIRMWARE_UPDATES_LOG})
else
	_LOG_SIZE=0
fi

# Let the log file know that we have downloaded and started.
echo "$(date +%Y%m%d-%H%M%S) - Begin firmware.upgrade script - ${_VERSION}." >> ${_FIRMWARE_UPDATES_LOG}

if [ ${_LOG_SIZE} -ge ${_MAX_LOG_SIZE} ]
then
	echo "Size of ${_FIRMWARE_UPDATES_LOG} is over the ${_MAX_LOG_SIZE} bytes limit." >> ${_FIRMWARE_UPDATES_LOG}
	mv ${_FIRMWARE_UPDATES_LOG} "${_FIRMWARE_UPDATES_LOG}.bak"
else
	echo "Size of ${_FIRMWARE_UPDATES_LOG} is under the ${_MAX_LOG_SIZE} bytes limit." >> ${_FIRMWARE_UPDATES_LOG}
fi

# Pull in psu updates for live media from the rsync server.
rsync -av --append-verify ${_RSYNC_SERVER}/${_IMAGE_VERSION}/live/ ${_LIVE_PATH}/live/ >> ${_FIRMWARE_UPDATES_LOG} 2>&1

# Pull in menu updates for boot menu to the live media from the rsync server.
rsync -av --append-verify ${_RSYNC_SERVER}/${_IMAGE_VERSION}/boot/ ${_LIVE_PATH}/boot/ >> ${_FIRMWARE_UPDATES_LOG} 2>&1

# Let the log file know that we have finished.
echo "$(date +%Y%m%d-%H%M%S) - End firmware.upgrade script - ${_VERSION}." >> ${_FIRMWARE_UPDATES_LOG}
echo "" >> ${_FIRMWARE_UPDATES_LOG}

# Remount the media.
mount -o remount,ro ${_LIVE_PATH}

exit 0
